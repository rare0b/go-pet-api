// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/controller/pet.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPetController is a mock of PetController interface.
type MockPetController struct {
	ctrl     *gomock.Controller
	recorder *MockPetControllerMockRecorder
}

// MockPetControllerMockRecorder is the mock recorder for MockPetController.
type MockPetControllerMockRecorder struct {
	mock *MockPetController
}

// NewMockPetController creates a new mock instance.
func NewMockPetController(ctrl *gomock.Controller) *MockPetController {
	mock := &MockPetController{ctrl: ctrl}
	mock.recorder = &MockPetControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetController) EXPECT() *MockPetControllerMockRecorder {
	return m.recorder
}

// CreatePet mocks base method.
func (m *MockPetController) CreatePet(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePet", w, r)
}

// CreatePet indicates an expected call of CreatePet.
func (mr *MockPetControllerMockRecorder) CreatePet(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePet", reflect.TypeOf((*MockPetController)(nil).CreatePet), w, r)
}

// DeletePetByID mocks base method.
func (m *MockPetController) DeletePetByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePetByID", w, r)
}

// DeletePetByID indicates an expected call of DeletePetByID.
func (mr *MockPetControllerMockRecorder) DeletePetByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetByID", reflect.TypeOf((*MockPetController)(nil).DeletePetByID), w, r)
}

// GetPetByID mocks base method.
func (m *MockPetController) GetPetByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPetByID", w, r)
}

// GetPetByID indicates an expected call of GetPetByID.
func (mr *MockPetControllerMockRecorder) GetPetByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetByID", reflect.TypeOf((*MockPetController)(nil).GetPetByID), w, r)
}

// GetPetsByStatuses mocks base method.
func (m *MockPetController) GetPetsByStatuses(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPetsByStatuses", w, r)
}

// GetPetsByStatuses indicates an expected call of GetPetsByStatuses.
func (mr *MockPetControllerMockRecorder) GetPetsByStatuses(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsByStatuses", reflect.TypeOf((*MockPetController)(nil).GetPetsByStatuses), w, r)
}

// UpdatePet mocks base method.
func (m *MockPetController) UpdatePet(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePet", w, r)
}

// UpdatePet indicates an expected call of UpdatePet.
func (mr *MockPetControllerMockRecorder) UpdatePet(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePet", reflect.TypeOf((*MockPetController)(nil).UpdatePet), w, r)
}

// UpdatePetByID mocks base method.
func (m *MockPetController) UpdatePetByID(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePetByID", w, r)
}

// UpdatePetByID indicates an expected call of UpdatePetByID.
func (mr *MockPetControllerMockRecorder) UpdatePetByID(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetByID", reflect.TypeOf((*MockPetController)(nil).UpdatePetByID), w, r)
}

// UploadImage mocks base method.
func (m *MockPetController) UploadImage(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UploadImage", w, r)
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockPetControllerMockRecorder) UploadImage(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockPetController)(nil).UploadImage), w, r)
}
